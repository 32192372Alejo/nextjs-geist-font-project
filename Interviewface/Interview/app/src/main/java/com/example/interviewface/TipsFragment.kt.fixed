import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.activity.OnBackPressedCallback
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material.icons.filled.MenuBook
import androidx.compose.material.icons.filled.Star
import androidx.compose.material.icons.filled.VideoLibrary
import androidx.compose.material.icons.filled.Mic
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.ComposeView
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.fragment.app.Fragment
import com.example.interviewface.ui.theme.InterviewfaceTheme

class TipsFragment : Fragment() {

    // Variable para controlar si se debe mostrar directamente la pestaña de FAQ
    private var showFaq: Boolean = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // Obtener el argumento showFaq si existe
        arguments?.let {
            showFaq = it.getBoolean("showFaq", false)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Configurar el callback para el botón de retroceso
        val callback = object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                // Navegar de vuelta a la actividad principal
                requireActivity().supportFragmentManager.popBackStack()
            }
        }
        requireActivity().onBackPressedDispatcher.addCallback(viewLifecycleOwner, callback)
        
        return ComposeView(requireContext()).apply {
            setContent {
                InterviewfaceTheme {
                    Surface(
                        modifier = Modifier.fillMaxSize(),
                        color = Color(0xFF0A1622)
                    ) {
                        ConsejosRecursosScreen()
                    }
                }
            }
        }
    }

    @Composable
    fun ConsejosRecursosScreen() {
        var categoryIndex by remember { mutableStateOf(if (showFaq) 0 else 0) }
        val categories = listOf("Libros", "Cursos", "Podcasts", "Videos")
        
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFF0A1622))
                .padding(top = 16.dp)
        ) {
            // Título
            Text(
                text = "Consejos",
                color = Color.White,
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)
            )
            
            // Pestañas de categorías
            ScrollableTabRow(
                selectedTabIndex = categoryIndex,
                containerColor = Color(0xFF0A1622),
                contentColor = Color.White,
                edgePadding = 16.dp,
                indicator = { tabPositions ->
                    TabRowDefaults.Indicator(
                        modifier = Modifier.tabIndicatorOffset(tabPositions[categoryIndex]),
                        height = 3.dp,
                        color = Color(0xFF1A80E5)
                    )
                }
            ) {
                categories.forEachIndexed { index, category ->
                    Tab(
                        selected = categoryIndex == index,
                        onClick = { categoryIndex = index },
                        text = {
                            Text(
                                text = category,
                                fontWeight = if (categoryIndex == index) FontWeight.Bold else FontWeight.Normal
                            )
                        },
                        selectedContentColor = Color(0xFF1A80E5),
                        unselectedContentColor = Color.LightGray
                    )
                }
            }
            
            // Contenido según la categoría seleccionada
            when (categoryIndex) {
                0 -> BooksContent()
                1 -> CoursesContent()
                2 -> PodcastsContent()
                3 -> VideosContent()
            }
        }
    }

    // Implementaciones directas de las funciones de contenido para evitar dependencias externas
    // Implementación de BookCard tomada de RecursosFragment
    @Composable
    fun BookCard(title: String, author: String, description: String, rating: Float, bookColor: Color, url: String) {
        val context = LocalContext.current
        
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .clickable {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                    context.startActivity(intent)
                },
            colors = CardDefaults.cardColors(containerColor = Color(0xFF17222E)),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                // Portada del libro
                Box(
                    modifier = Modifier
                        .width(100.dp)
                        .height(150.dp)
                        .clip(RoundedCornerShape(8.dp))
                        .background(bookColor),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.MenuBook,
                        contentDescription = null,
                        tint = Color.White.copy(alpha = 0.7f),
                        modifier = Modifier.size(40.dp)
                    )
                }
                
                Spacer(modifier = Modifier.width(16.dp))
                
                // Información del libro
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = title,
                        color = Color.White,
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(4.dp))
                    
                    Text(
                        text = "por $author",
                        color = Color.LightGray,
                        fontSize = 14.sp
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    // Valoración
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        repeat(5) { index ->
                            val starColor = if (index < rating) Color(0xFFFFC107) else Color.Gray
                            Icon(
                                imageVector = Icons.Default.Star,
                                contentDescription = null,
                                tint = starColor,
                                modifier = Modifier.size(16.dp)
                            )
                        }
                        
                        Text(
                            text = rating.toString(),
                            color = Color.LightGray,
                            fontSize = 14.sp,
                            modifier = Modifier.padding(start = 4.dp)
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    // Descripción
                    Text(
                        text = description,
                        color = Color.LightGray,
                        fontSize = 14.sp,
                        lineHeight = 20.sp,
                        maxLines = 4,
                        overflow = TextOverflow.Ellipsis
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    // Botón de leer más
                    TextButton(
                        onClick = {
                            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                            context.startActivity(intent)
                        },
                        colors = ButtonDefaults.textButtonColors(
                            contentColor = Color(0xFF1A80E5)
                        )
                    ) {
                        Text("Leer más")
                        Icon(
                            imageVector = Icons.Default.ArrowForward,
                            contentDescription = null,
                            modifier = Modifier.size(16.dp)
                        )
                    }
                }
            }
        }
    }

    @Composable
    fun BooksContent() {
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            contentPadding = PaddingValues(bottom = 100.dp)
        ) {
            item {
                BookCard(
                    title = "Cracking the Coding Interview",
                    author = "Gayle Laakmann McDowell",
                    description = "Guía esencial para prepararte para entrevistas técnicas con más de 189 preguntas y soluciones.",
                    rating = 4.7f,
                    bookColor = Color(0xFF1A80E5),
                    url = "https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850"
                )
            }
            
            item {
                BookCard(
                    title = "Soft Skills: The Software Developer's Life Manual",
                    author = "John Sonmez",
                    description = "Guía completa para desarrollar habilidades blandas esenciales para destacar en entrevistas y en tu carrera profesional.",
                    rating = 4.5f,
                    bookColor = Color(0xFF6200EA),
                    url = "https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397"
                )
            }
            
            item {
                BookCard(
                    title = "Programming Interviews Exposed",
                    author = "John Mongan, Noah Kindler",
                    description = "Preparación completa para entrevistas técnicas con consejos prácticos y problemas reales.",
                    rating = 4.3f,
                    bookColor = Color(0xFF43A047),
                    url = "https://www.amazon.com/Programming-Interviews-Exposed-Secrets-Landing/dp/1118261364"
                )
            }
        }
    }

    @Composable
    fun CourseCard(title: String, instructor: String, description: String, duration: String, level: String, url: String) {
        val context = LocalContext.current
        
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .clickable {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                    context.startActivity(intent)
                },
            colors = CardDefaults.cardColors(containerColor = Color(0xFF17222E)),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    // Icono del curso
                    Box(
                        modifier = Modifier
                            .size(56.dp)
                            .clip(RoundedCornerShape(12.dp))
                            .background(Color(0xFF1A80E5).copy(alpha = 0.1f)),
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            imageVector = Icons.Default.MenuBook,
                            contentDescription = null,
                            tint = Color(0xFF1A80E5),
                            modifier = Modifier.size(28.dp)
                        )
                    }
                    
                    Spacer(modifier = Modifier.width(16.dp))
                    
                    // Título e instructor
                    Column(modifier = Modifier.weight(1f)) {
                        Text(
                            text = title,
                            color = Color.White,
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold
                        )
                        
                        Text(
                            text = instructor,
                            color = Color.LightGray,
                            fontSize = 14.sp
                        )
                    }
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                // Descripción
                Text(
                    text = description,
                    color = Color.LightGray,
                    fontSize = 14.sp,
                    lineHeight = 20.sp
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                // Detalles del curso
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    // Duración
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text(
                            text = "Duración",
                            color = Color.Gray,
                            fontSize = 12.sp
                        )
                        Text(
                            text = duration,
                            color = Color.White,
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                    
                    // Nivel
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text(
                            text = "Nivel",
                            color = Color.Gray,
                            fontSize = 12.sp
                        )
                        Text(
                            text = level,
                            color = Color.White,
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                    
                    // Botón de inscribirse
                    TextButton(
                        onClick = {
                            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                            context.startActivity(intent)
                        },
                        colors = ButtonDefaults.textButtonColors(
                            contentColor = Color(0xFF1A80E5)
                        )
                    ) {
                        Text("Ver curso")
                        Icon(
                            imageVector = Icons.Default.ArrowForward,
                            contentDescription = null,
                            modifier = Modifier.size(16.dp)
                        )
                    }
                }
            }
        }
    }

    @Composable
    fun CoursesContent() {
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            contentPadding = PaddingValues(bottom = 100.dp)
        ) {
            item {
                CourseCard(
                    title = "Domina la entrevista técnica",
                    instructor = "Tech Interview Pro",
                    description = "Curso completo para prepararte para entrevistas técnicas en empresas de tecnología, con ejercicios prácticos y simulaciones de entrevistas.",
                    duration = "15 horas",
                    level = "Intermedio",
                    url = "https://www.udemy.com/course/tech-interview-pro/"
                )
            }
            
            item {
                CourseCard(
                    title = "Habilidades de comunicación para entrevistas",
                    instructor = "Career Skills Academy",
                    description = "Aprende a comunicarte efectivamente durante las entrevistas de trabajo, destacando tus fortalezas y respondiendo preguntas difíciles.",
                    duration = "8 horas",
                    level = "Principiante",
                    url = "https://www.coursera.org/learn/communication-skills-interviews"
                )
            }
            
            item {
                CourseCard(
                    title = "Entrevistas comportamentales: Método STAR",
                    instructor = "Interview Success",
                    description = "Domina el método STAR para responder preguntas comportamentales en entrevistas, con ejemplos prácticos y plantillas personalizables.",
                    duration = "6 horas",
                    level = "Todos los niveles",
                    url = "https://www.linkedin.com/learning/behavioral-interviews-star-method"
                )
            }
        }
    }

    @Composable
    fun PodcastCard(title: String, host: String, description: String, episodes: Int, url: String) {
        val context = LocalContext.current
        
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .clickable {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                    context.startActivity(intent)
                },
            colors = CardDefaults.cardColors(containerColor = Color(0xFF17222E)),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Icono del podcast
                Box(
                    modifier = Modifier
                        .size(64.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(Color(0xFF6200EA).copy(alpha = 0.1f)),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.Mic,
                        contentDescription = null,
                        tint = Color(0xFF6200EA),
                        modifier = Modifier.size(32.dp)
                    )
                }
                
                Spacer(modifier = Modifier.width(16.dp))
                
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = title,
                        color = Color.White,
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Text(
                        text = host,
                        color = Color.LightGray,
                        fontSize = 14.sp
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Text(
                        text = description,
                        color = Color.LightGray,
                        fontSize = 14.sp,
                        lineHeight = 20.sp,
                        maxLines = 3,
                        overflow = TextOverflow.Ellipsis
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "$episodes episodios",
                            color = Color(0xFF6200EA),
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium
                        )
                        
                        TextButton(
                            onClick = {
                                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                                context.startActivity(intent)
                            },
                            colors = ButtonDefaults.textButtonColors(
                                contentColor = Color(0xFF6200EA)
                            )
                        ) {
                            Text("Escuchar")
                            Icon(
                                imageVector = Icons.Default.ArrowForward,
                                contentDescription = null,
                                modifier = Modifier.size(16.dp)
                            )
                        }
                    }
                }
            }
        }
    }

    @Composable
    fun PodcastsContent() {
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            contentPadding = PaddingValues(bottom = 100.dp)
        ) {
            item {
                PodcastCard(
                    title = "La clave para hacer bien una entrevista",
                    host = "Desarrollo profesional",
                    description = "Podcast reconocido que revela las claves esenciales para destacar en entrevistas laborales, con consejos prácticos de expertos en selección de personal.",
                    episodes = 6,
                    url = "https://open.spotify.com/episode/65TcatKtbtex7mrVKKS88n"
                )
            }
            
            item {
                PodcastCard(
                    title = "Entrevistas de trabajo: Desde el lado del que contrata",
                    host = "El Podcast de Wisdenn",
                    description = "Perspectiva única desde el punto de vista del reclutador, revelando lo que realmente buscan los empleadores durante las entrevistas.",
                    episodes = 5,
                    url = "https://open.spotify.com/episode/5GqpzeYNZtbyTxiyjKQ6ba"
                )
            }
            
            item {
                PodcastCard(
                    title = "Preguntas para destacar en una entrevista",
                    host = "Desarrollo profesional",
                    description = "Aprende qué preguntas hacer durante una entrevista para impresionar a los reclutadores y destacar entre los demás candidatos.",
                    episodes = 8,
                    url = "https://open.spotify.com/episode/35vYxhvxAXvu0eOzPEOwXz"
                )
            }
        }
    }

    @Composable
    fun VideoCard(title: String, creator: String, description: String, duration: String, url: String) {
        val context = LocalContext.current
        
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .clickable {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                    context.startActivity(intent)
                },
            colors = CardDefaults.cardColors(containerColor = Color(0xFF17222E)),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Miniatura del video con icono de reproducción
                    Box(
                        modifier = Modifier
                            .size(width = 120.dp, height = 70.dp)
                            .clip(RoundedCornerShape(8.dp))
                            .background(Color(0xFF0F1621)),
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            imageVector = Icons.Default.PlayArrow,
                            contentDescription = null,
                            tint = Color.White,
                            modifier = Modifier.size(24.dp)
                        )
                    }
                    
                    Spacer(modifier = Modifier.width(16.dp))
                    
                    // Información del video
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            text = title,
                            color = Color.White,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Bold
                        )
                        
                        Spacer(modifier = Modifier.height(4.dp))
                        
                        Text(
                            text = creator,
                            color = Color.LightGray,
                            fontSize = 14.sp
                        )
                        
                        Spacer(modifier = Modifier.height(4.dp))
                        
                        // Duración
                        Row(verticalAlignment = Alignment.CenterVertically) {
                            Text(
                                text = duration,
                                color = Color(0xFF1A80E5),
                                fontSize = 12.sp,
                                fontWeight = FontWeight.Medium
                            )
                        }
                    }
                }
                
                Spacer(modifier = Modifier.height(12.dp))
                
                // Descripción
                Text(
                    text = description,
                    color = Color.LightGray,
                    fontSize = 14.sp,
                    lineHeight = 20.sp
                )
                
                Spacer(modifier = Modifier.height(12.dp))
                
                // Botón de ver
                TextButton(
                    onClick = {
                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                        context.startActivity(intent)
                    },
                    colors = ButtonDefaults.textButtonColors(
                        contentColor = Color(0xFF1A80E5)
                    )
                ) {
                    Text("Ver video")
                    Icon(
                        imageVector = Icons.Default.ArrowForward,
                        contentDescription = null,
                        modifier = Modifier.size(16.dp)
                    )
                }
            }
        }
    }

    @Composable
    fun VideosContent() {
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            contentPadding = PaddingValues(bottom = 100.dp)
        ) {
            item {
                VideoCard(
                    title = "Tips para una buena entrevista",
                    creator = "Popular",
                    description = "Aprende los consejos más efectivos para destacar en tus entrevistas laborales y causar una excelente primera impresión.",
                    duration = "0:45",
                    url = "https://youtu.be/51tcTh8jDus?si=X_h41gDynR2LO3s1"
                )
            }
            
            item {
                VideoCard(
                    title = "Preguntas mas desafiantes",
                    creator = "Michael Page",
                    description = "Estrategias para responder con confianza a las preguntas más complicadas que suelen hacer los reclutadores.",
                    duration = "2:35",
                    url = "https://youtu.be/jQ5Ua5zv-Y4?si=BAPzonY08HITSC0V"
                )
            }
            
            item {
                VideoCard(
                    title = "Lenguaje corporal efectivo",
                    creator = "Psicologia visual",
                    description = "Aprende a utilizar el lenguaje corporal a tu favor durante las entrevistas para proyectar seguridad y profesionalismo.",
                    duration = "3:55",
                    url = "https://youtu.be/l-jgyTmqPHs?si=xbMDmMrQOLJswsO1"
                )
            }
        }
    }
}
